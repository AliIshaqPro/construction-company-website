<style>
/* custom.css */
.calculator {
    width: 100%;
    
    margin: 0 auto;
    background-color: #fff;
    box-shadow: 0 4px 8px rgba(0,0,0,0.1);
    border-radius: 10px;
}

.calculator h2 {
    text-align: center;
    color: #333;
}

.input-group {
    margin-bottom: 20px;
}

.input-group label {
    display: block;
    margin-bottom: 8px;
    font-weight: 600;
}

.input-group input, .input-group select {
    width: 100%;
    padding: 10px;
    font-size: 16px;
    box-sizing: border-box;
    border: 1px solid #ced4da;
    border-radius: 5px;
}

.calculate-btn {
    width: 100%;
    padding: 15px;
    background-color: #007bff;
    color: white;
    border: none;
    cursor: pointer;
    font-size: 18px;
    font-weight: bold;
    border-radius: 5px;
}

.calculate-btn:hover {
    background-color: #218838;
}

.popup {
    position: fixed;
    top: 50%;
    left: 50%;
    transform: translate(-50%, -50%);
    background-color: #fff;
    padding: 30px;
    box-shadow: 0 0 15px rgba(0, 0, 0, 0.5);
    display: none;
    z-index: 9999;
    border-radius: 10px;
    width: 80%;
    max-width: 400px;
}

.popup h3 {
    margin-bottom: 15px;
    text-align: center;
}

.close-popup {
    background-color: #dc3545;
    color: white;
    padding: 10px;
    border: none;
    cursor: pointer;
    font-size: 16px;
    width: 100%;
    border-radius: 5px;
}

.overlay {
    position: fixed;
    top: 0;
    left: 0;
    width: 100%;
    height: 100%;
    background-color: rgba(0, 0, 0, 0.5);
    z-index: 9998;
    display: none;
}

</style>
<div class="box" style="margin-top:150px;margin-bottom:20px;">
<div class="calculator">
    <h2>Hardcore Calculator</h2>
    <div id="error" class="error"></div>

    <!-- Length input with default options -->
    <div class="input-group">
        <label for="length">Length (metres):</label>
        <input type="number" id="length" min="0" placeholder="Enter length in metres" list="lengthOptions" value="5">
        <datalist id="lengthOptions">
            <option value="5">5 metres</option>
            <option value="10">10 metres</option>
            <option value="15">15 metres</option>
            <option value="20">20 metres</option>
        </datalist>
    </div>

    <!-- Width input with default options -->
    <div class="input-group">
        <label for="width">Width (metres):</label>
        <input type="number" id="width" min="0" placeholder="Enter width in metres" list="widthOptions" value="5">
        <datalist id="widthOptions">
            <option value="5">5 metres</option>
            <option value="10">10 metres</option>
            <option value="15">15 metres</option>
            <option value="20">20 metres</option>
        </datalist>
    </div>

    <!-- Depth input with default options -->
    <div class="input-group">
        <label for="depth">Depth (mm):</label>
        <input type="number" id="depth" min="0" placeholder="Enter depth in mm" list="depthOptions" value="100">
        <datalist id="depthOptions">
            <option value="100">100 mm</option>
            <option value="150">150 mm</option>
            <option value="200">200 mm</option>
            <option value="250">250 mm</option>
        </datalist>
    </div>

    <!-- Compaction checkbox -->
    <div class="input-group">
        <label for="compaction">Include 20% extra for compacting:</label>
        <input type="checkbox" id="compaction" style="width:20px; padding-left:10px;">
    </div>

    <button class="calculate-btn" onclick="calculateHardcore()">Calculate</button>
</div>

<!-- Result popup -->
<div class="popup" id="resultPopup">
    <h3>Result</h3>
    <p id="resultText"></p>
    <button class="close-popup" onclick="closePopup()">Close</button>
</div>
<div class="overlay" id="overlay"></div>
</div>
<script>
    function calculateHardcore() {
        const length = parseFloat(document.getElementById('length').value);
        const width = parseFloat(document.getElementById('width').value);
        const depth = parseFloat(document.getElementById('depth').value) / 1000; // Convert mm to metres
        const compaction = document.getElementById('compaction').checked;
        const errorDiv = document.getElementById('error');

        // Clear previous error message
        errorDiv.innerHTML = "";

        if (isNaN(length) || isNaN(width) || isNaN(depth) || length <= 0 || width <= 0 || depth <= 0) {
            errorDiv.innerHTML = 'Please enter valid dimensions (positive numbers).';
            return;
        }

        // Calculate volume in cubic metres
        let volume = length * width * depth;
        if (compaction) {
            volume *= 1.2; // Add 20% for compaction
        }

        // Weight calculations (arbitrary values for loose and compacted weight)
        const looseFillWeight = volume * 1.5; // Assume loose fill weight in tonnes/m³
        const compactedWeight = volume * 2.64; // Assume compacted weight in tonnes/m³

        // Display the results in the popup
        document.getElementById('resultText').innerHTML = `
            Volume (cubic metres): ${volume.toFixed(2)}<br>
            Loose fill weight (tonnes): ${looseFillWeight.toFixed(2)}<br>
            Compacted weight (tonnes): ${compactedWeight.toFixed(2)}
        `;

        openPopup();
    }

    function openPopup() {
        document.getElementById('resultPopup').style.display = 'block';
        document.getElementById('overlay').style.display = 'block';
    }

    function closePopup() {
        document.getElementById('resultPopup').style.display = 'none';
        document.getElementById('overlay').style.display = 'none';
    }
</script>